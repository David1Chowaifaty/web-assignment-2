{"version":3,"names":["irInputCss","IrInput","componentWillLoad","this","value","currentValue","handleChange","event","target","render","h","class","inputStyle","type","placeholder","onInput","bind"],"sources":["src/components/ir-input/ir-input.css?tag=ir-input","src/components/ir-input/ir-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n/* input {\n  border: none;\n  padding: 0;\n  margin: 0;\n  background: transparent;\n  font: inherit;\n  color: inherit;\n  font-size: inherit;\n  font-family: inherit;\n  cursor: inherit;\n  width: 100%;\n  outline: 0;\n}\ninput:hover {\n  outline: 0;\n} */\n","import { Component, Prop, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-input',\n  styleUrl: 'ir-input.css',\n  shadow: false,\n})\nexport class IrInput {\n  @Prop({ reflect: true }) placeholder: string;\n  @Prop({ reflect: true, mutable: true }) value: string;\n  @Prop({ reflect: true }) type: string;\n  @State() currentValue: string;\n  @Prop({ reflect: true }) inputStyle: string;\n\n  componentWillLoad() {\n    if (this.value !== '') {\n      this.currentValue = this.value;\n    }\n  }\n\n  handleChange(event: Event) {\n    this.currentValue = (event.target as HTMLInputElement).value;\n    this.value = this.currentValue;\n  }\n  render() {\n    return <input class={this.inputStyle} type={this.type} placeholder={this.placeholder} value={this.value} onInput={this.handleChange.bind(this)} />;\n  }\n}\n"],"mappings":"2CAAA,MAAMA,EAAa,uB,MCONC,EAAO,M,mJAOlB,iBAAAC,GACE,GAAIC,KAAKC,QAAU,GAAI,CACrBD,KAAKE,aAAeF,KAAKC,K,EAI7B,YAAAE,CAAaC,GACXJ,KAAKE,aAAgBE,EAAMC,OAA4BJ,MACvDD,KAAKC,MAAQD,KAAKE,Y,CAEpB,MAAAI,GACE,OAAOC,EAAA,SAAOC,MAAOR,KAAKS,WAAYC,KAAMV,KAAKU,KAAMC,YAAaX,KAAKW,YAAaV,MAAOD,KAAKC,MAAOW,QAASZ,KAAKG,aAAaU,KAAKb,O"}