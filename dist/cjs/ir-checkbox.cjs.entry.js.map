{"file":"ir-checkbox.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,aAAa,GAAG,sBAAsB;;MCO/B,UAAU;;;;iBACoB,EAAE;mBACA,EAAE;;;;;;sBAQd,KAAK;;EACpC,iBAAiB;IACf,IAAI,CAAC,aAAa,EAAE,CAAC;GACtB;EAED,aAAa;IACX,IAAI,CAAC,aAAa,EAAE,CAAC;GACtB;EACD,aAAa;IACX,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,OAAO,KAAK,EAAE,EAAE;MAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;SAAM;MACL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;GACF;EACD,YAAY,CAAC,KAAY;IACvB,MAAM,SAAS,GAAI,KAAK,CAAC,MAA2B,CAAC,OAAO,CAAC;IAC7D,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GACpC;EAED,MAAM;IACJ,QACEA,QAACC,UAAI,QACHD,mBAAO,IAAI,EAAC,UAAU,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,GAAI,EAC7J,IAAI,CAAC,UAAU,KACdA,mBAAO,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,IACjD,IAAI,CAAC,KAAK,CACL,CACT,CACI,EACP;GACH;;;;;;;;;","names":["h","Host"],"sources":["src/components/ir-checkbox/ir-checkbox.css?tag=ir-checkbox","src/components/ir-checkbox/ir-checkbox.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n","import { Component, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\r\nimport 'jquery';\r\n@Component({\r\n  tag: 'ir-checkbox',\r\n  styleUrl: 'ir-checkbox.css',\r\n  shadow: false,\r\n})\r\nexport class IrCheckbox {\r\n  @Prop({ reflect: true }) label: string = '';\r\n  @Prop({ reflect: true }) inputId: string = '';\r\n  @Prop({ reflect: true }) checkboxStyle: string;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) labelStyle: string;\r\n  @Prop({ reflect: true }) containerStyle: string;\r\n  @Prop({ reflect: true, mutable: true }) checked: boolean;\r\n  @Event({ bubbles: true, composed: true }) oncheckchange: EventEmitter<boolean>;\r\n\r\n  @State() labelShown: boolean = false;\r\n  componentWillLoad() {\r\n    this.setLabelShown();\r\n  }\r\n  @Watch('label')\r\n  onLabelChange() {\r\n    this.setLabelShown();\r\n  }\r\n  setLabelShown() {\r\n    if (this.label !== '' && this.inputId !== '') {\r\n      this.labelShown = true;\r\n    } else {\r\n      this.labelShown = false;\r\n    }\r\n  }\r\n  handleChange(event: Event) {\r\n    const isChecked = (event.target as HTMLInputElement).checked;\r\n    this.checked = isChecked;\r\n    this.oncheckchange.emit(isChecked);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <input type=\"checkbox\" disabled={this.disabled} onChange={this.handleChange.bind(this)} checked={this.checked} class={this.checkboxStyle} id={this.inputId} />\r\n        {this.labelShown && (\r\n          <label class={this.labelStyle} htmlFor={this.inputId}>\r\n            {this.label}\r\n          </label>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}