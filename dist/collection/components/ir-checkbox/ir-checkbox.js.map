{"version":3,"file":"ir-checkbox.js","sourceRoot":"","sources":["../../../src/components/ir-checkbox/ir-checkbox.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAO5F,MAAM,OAAO,UAAU;;iBACoB,EAAE;mBACA,EAAE;;;;;;sBAQd,KAAK;;EAEpC,iBAAiB;IACf,IAAI,CAAC,aAAa,EAAE,CAAC;EACvB,CAAC;EACD,gBAAgB;IACd,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;MACzB,aAAa,EAAE,uBAAuB;MACtC,UAAU,EAAE,oBAAoB;KACjC,CAAC,CAAC;IACH,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,KAAU,EAAE,EAAE;MACjD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,aAAa;IACX,IAAI,CAAC,aAAa,EAAE,CAAC;EACvB,CAAC;EACD,aAAa;IACX,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,OAAO,KAAK,EAAE,EAAE;MAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;SAAM;MACL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;EACH,CAAC;EACD,YAAY,CAAC,KAAY;IACvB,MAAM,SAAS,GAAI,KAAK,CAAC,MAA2B,CAAC,OAAO,CAAC;IAC7D,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;EACrC,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,aACE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,EAClC,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EACtC,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,KAAK,EAAE,IAAI,CAAC,aAAa,EACzB,EAAE,EAAE,IAAI,CAAC,OAAO,GAChB;MACD,IAAI,CAAC,UAAU,IAAI,CAClB,aAAO,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,IACjD,IAAI,CAAC,KAAK,CACL,CACT,CACI,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-checkbox',\r\n  styleUrl: 'ir-checkbox.css',\r\n  shadow: false,\r\n})\r\nexport class IrCheckbox {\r\n  @Prop({ reflect: true }) label: string = '';\r\n  @Prop({ reflect: true }) inputId: string = '';\r\n  @Prop({ reflect: true }) checkboxStyle: string;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) labelStyle: string;\r\n  @Prop({ reflect: true }) containerStyle: string;\r\n  @Prop({ reflect: true, mutable: true }) checked: boolean;\r\n  @Event({ bubbles: true, composed: true }) oncheckchange: EventEmitter<boolean>;\r\n\r\n  @State() labelShown: boolean = false;\r\n  checkboxRef: HTMLElement;\r\n  componentWillLoad() {\r\n    this.setLabelShown();\r\n  }\r\n  componentDidLoad() {\r\n    $(this.checkboxRef).iCheck({\r\n      checkboxClass: 'icheckbox_square-blue',\r\n      radioClass: 'iradio_square-blue',\r\n    });\r\n    $(this.checkboxRef).on('ifChanged', (event: any) => {\r\n      this.handleChange(event);\r\n    });\r\n  }\r\n  @Watch('label')\r\n  onLabelChange() {\r\n    this.setLabelShown();\r\n  }\r\n  setLabelShown() {\r\n    if (this.label !== '' && this.inputId !== '') {\r\n      this.labelShown = true;\r\n    } else {\r\n      this.labelShown = false;\r\n    }\r\n  }\r\n  handleChange(event: Event) {\r\n    const isChecked = (event.target as HTMLInputElement).checked;\r\n    this.checked = isChecked;\r\n    this.oncheckchange.emit(isChecked);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <input\r\n          ref={el => (this.checkboxRef = el)}\r\n          type=\"checkbox\"\r\n          disabled={this.disabled}\r\n          onChange={this.handleChange.bind(this)}\r\n          checked={this.checked}\r\n          class={this.checkboxStyle}\r\n          id={this.inputId}\r\n        />\r\n        {this.labelShown && (\r\n          <label class={this.labelStyle} htmlFor={this.inputId}>\r\n            {this.label}\r\n          </label>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}