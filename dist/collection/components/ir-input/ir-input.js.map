{"version":3,"file":"ir-input.js","sourceRoot":"","sources":["../../../src/components/ir-input/ir-input.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAgB,KAAK,EAAE,MAAM,eAAe,CAAC;AAOrF,MAAM,OAAO,OAAO;;iBACuB,EAAE;;;;;;;;mBASf,KAAK;;EAEjC,YAAY,CAAC,KAAK;IAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;IAChC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC;EACD,mBAAmB;IACjB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,4CAA4C,CAAC;IAClH,OAAO,GAAG,SAAS,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;EAC/C,CAAC;EACD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,gBAAU,KAAK,EAAE,IAAI,CAAC,mBAAmB,EAAE;QACxC,IAAI,CAAC,KAAK,IAAI,CACb,WAAK,KAAK,EAAC,qBAAqB;UAC9B,YAAM,KAAK,EAAC,kBAAkB,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,IAC5C,IAAI,CAAC,KAAK,CACN,CACH,CACP;QACD,aACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,KAAK,EAAC,cAAc,EACpB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,gBAC/B,OAAO,sBACD,sBAAsB,EACvC,QAAQ,EAAE,IAAI,CAAC,QAAQ,GACvB;QACD,IAAI,CAAC,IAAI,IAAI,CACZ,WAAK,KAAK,EAAC,uBAAuB;UAChC,SAAG,KAAK,EAAE,IAAI,CAAC,IAAI,QAAO,CACtB,CACP,CACQ,CACN,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, h, Event, EventEmitter, State } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-input',\r\n  styleUrl: 'ir-input.css',\r\n  shadow: false,\r\n})\r\nexport class IrInput {\r\n  @Prop({ reflect: true }) label: string = '';\r\n  @Prop({ reflect: true }) icon: string;\r\n  @Prop({ reflect: true }) inputId: string;\r\n  @Prop({ reflect: true }) placeholder: string;\r\n  @Prop({ reflect: true }) value: string;\r\n  @Prop({ reflect: true }) type: string;\r\n  @Prop({ reflect: true }) containerStyle: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Event({ bubbles: true, composed: true }) ontextchange: EventEmitter<string>;\r\n  @State() visible: boolean = false;\r\n\r\n  handleChange(event) {\r\n    this.visible = true;\r\n    this.value = event.target.value;\r\n    this.ontextchange.emit(this.value);\r\n  }\r\n  applyContainerStyle() {\r\n    const baseClass = this.label !== '' ? 'input-group input-group-sm' : 'form-group position-relative has-icon-left';\r\n    return `${baseClass} ${this.containerStyle}`;\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <fieldset class={this.applyContainerStyle()}>\r\n          {this.label && (\r\n            <div class=\"input-group-prepend\">\r\n              <span class=\"input-group-text\" id={this.inputId}>\r\n                {this.label}\r\n              </span>\r\n            </div>\r\n          )}\r\n          <input\r\n            type={this.type}\r\n            placeholder={this.placeholder}\r\n            class=\"form-control\"\r\n            value={this.value}\r\n            onInput={event => this.handleChange(event)}\r\n            aria-label=\"Small\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n            required={this.required}\r\n          />\r\n          {this.icon && (\r\n            <div class=\"form-control-position\">\r\n              <i class={this.icon}> </i>\r\n            </div>\r\n          )}\r\n        </fieldset>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}