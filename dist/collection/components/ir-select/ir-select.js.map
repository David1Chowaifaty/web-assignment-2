{"version":3,"file":"ir-select.js","sourceRoot":"","sources":["../../../src/components/ir-select/ir-select.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\r\n@Component({\r\n  tag: 'ir-select',\r\n  styleUrl: 'ir-select.css',\r\n  shadow: false,\r\n})\r\nexport class IrSelect {\r\n  @Prop({ reflect: true }) data: string;\r\n  @Prop({ reflect: true, mutable: true }) selectedItem: string;\r\n  @State() selectData: SelectTypes[] = [];\r\n  @Event({ bubbles: true, composed: true }) onselectchange: EventEmitter<string>;\r\n  @Element() el: HTMLElement;\r\n  selectRef: HTMLSelectElement;\r\n\r\n  componentWillLoad() {\r\n    this.parseData();\r\n    this.moveAttributesToSelectElement();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.initializeSelect2();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.destroySelect2();\r\n  }\r\n\r\n  @Watch('data')\r\n  handleDataChange(newValue: string) {\r\n    if (newValue && newValue.trim() !== '') {\r\n      this.parseData();\r\n    }\r\n  }\r\n\r\n  private parseData() {\r\n    try {\r\n      this.selectData = JSON.parse(this.data) as SelectTypes[];\r\n    } catch (error) {\r\n      console.error('Error parsing JSON data:', error);\r\n    }\r\n  }\r\n\r\n  private moveAttributesToSelectElement() {\r\n    Array.from(this.el.attributes).forEach(attribute => {\r\n      if (attribute.name !== 'data') {\r\n        this.selectRef?.setAttribute(attribute.name, attribute.value);\r\n        this.el.removeAttribute(attribute.name);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeSelect2() {\r\n    $(this.selectRef).select2();\r\n    $(this.selectRef).on('change', e => {\r\n      const selectedValue = $(e.target).val().toString();\r\n      this.onselectchange.emit(selectedValue);\r\n      this.selectedItem = selectedValue;\r\n    });\r\n  }\r\n\r\n  private destroySelect2() {\r\n    $(this.selectRef).select2('destroy');\r\n  }\r\n\r\n  onSelectChange(e: Event) {\r\n    const selectedValue = (e.target as HTMLSelectElement).value;\r\n    this.onselectchange.emit(selectedValue);\r\n    this.selectedItem = selectedValue;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <select ref={el => (this.selectRef = el as HTMLSelectElement)} title=\"select\">\r\n          {this.selectData.map(d => (\r\n            <optgroup label={d.optgrouplabel}>\r\n              {d.options.map(option => (\r\n                <option value={option.value}>{option.title}</option>\r\n              ))}\r\n            </optgroup>\r\n          ))}\r\n        </select>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}