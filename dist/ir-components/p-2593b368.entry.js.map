{"version":3,"names":["IrSwitch","this","componentId","uuidv4","componentDidLoad","testElement","$","initializeSwitch","length","off","bootstrapSwitch","on","event","state","console","log","onSwitchChangeCallback","value","valueChange","emit","render","h","type","name","id"],"sources":["src/components/ir-switch/ir-switch.tsx"],"sourcesContent":["import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// import 'jquery';\r\n// import $ from 'jquery';\r\n// import 'bootstrap-switch';\r\n// import 'bootstrap-switch/dist/css/bootstrap3/bootstrap-switch.css';\r\n//import './jquery-extensions';\r\n\r\n@Component({\r\n  tag: 'ir-switch',\r\n})\r\nexport class IrSwitch {\r\n  @Prop({ mutable: true }) value: boolean = false;\r\n  @Prop() labelOn: string;\r\n  @Prop() labelOff: string;\r\n  @Prop() size?: string | 'mini' | 'small' | 'normal' | 'large'; // Add size prop\r\n  @Prop() switch_animate?: boolean; // Add animate prop\r\n  @Prop() disabled?: boolean; // Add disabled prop\r\n  @Prop() readonly?: boolean; // Add readonly prop\r\n  @Prop() indeterminate?: boolean; // Add indeterminate prop\r\n  @Prop() inverse?: boolean; // Add inverse prop\r\n  @Prop() radioAllOff?: boolean; // Add radioAllOff prop\r\n  @Prop() colorOn?: string; // Add onColor prop\r\n  @Prop() offColor?: string; // Add offColor prop\r\n  @Prop() classOn?: string; // Add onClass prop\r\n  @Prop() offClass?: string; // Add offClass prop\r\n  @Prop() labelText?: string; // Add labelText prop\r\n  @Prop() handleWidth?: string | 'auto'; // Add handleWidth prop\r\n  @Prop() labelWidth?: string | 'auto'; // Add labelWidth prop\r\n  @Prop() baseClass?: string; // Add baseClass prop\r\n  @Prop() wrapperClass?: string; // Add wrapperClass prop\r\n\r\n  @Event({ bubbles: true, composed: true }) valueChange: EventEmitter<boolean>;\r\n\r\n  componentId: string = uuidv4();\r\n\r\n  private testElement: JQuery;\r\n\r\n  componentDidLoad() {\r\n    this.testElement = $(`#${this.componentId}`);\r\n    this.initializeSwitch();\r\n  }\r\n\r\n  initializeSwitch() {\r\n    if (this.testElement && this.testElement.length) {\r\n      // Unbind previous event listeners\r\n      this.testElement.off('switchChange.bootstrapSwitch');\r\n\r\n      // Initialize Bootstrap Switch with updated state and props\r\n      this.testElement.bootstrapSwitch();\r\n\r\n      // Add event listener for switch change\r\n      this.testElement.on('switchChange.bootstrapSwitch', (event, state) => {\r\n        console.log('switchChange.bootstrapSwitch', event);\r\n        this.onSwitchChangeCallback(state);\r\n      });\r\n    }\r\n  }\r\n\r\n  onSwitchChangeCallback(state: boolean) {\r\n    this.value = state;\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  render() {\r\n    //console.log('Props', this.value);\r\n    return <input type=\"checkbox\" name=\"my-checkbox\" id={this.componentId} />;\r\n  }\r\n}\r\n"],"mappings":"4FAWaA,EAAQ,M,kEAuBnBC,KAAAC,YAAsBC,I,WAtBoB,M,icA0B1C,gBAAAC,GACEH,KAAKI,YAAcC,EAAE,IAAIL,KAAKC,eAC9BD,KAAKM,kB,CAGP,gBAAAA,GACE,GAAIN,KAAKI,aAAeJ,KAAKI,YAAYG,OAAQ,CAE/CP,KAAKI,YAAYI,IAAI,gCAGrBR,KAAKI,YAAYK,kBAGjBT,KAAKI,YAAYM,GAAG,gCAAgC,CAACC,EAAOC,KAC1DC,QAAQC,IAAI,+BAAgCH,GAC5CX,KAAKe,uBAAuBH,EAAM,G,EAKxC,sBAAAG,CAAuBH,GACrBZ,KAAKgB,MAAQJ,EACbZ,KAAKiB,YAAYC,KAAKlB,KAAKgB,M,CAG7B,MAAAG,GAEE,OAAOC,EAAA,SAAOC,KAAK,WAAWC,KAAK,cAAcC,GAAIvB,KAAKC,a"}